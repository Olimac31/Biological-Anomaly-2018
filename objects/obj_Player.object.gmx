<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_walkr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_p_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
image_speed = 0.2
puntaje = 0;
//Movimiento
intVY = 0;
intVX = 0;
intMove = 0;
forceMove = 0;
gamepad_set_axis_deadzone(4, 0.5);
keyDown = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(4, gp_shoulderrb);
keyZ = keyboard_check_pressed(ord("Z")) || gamepad_button_check_pressed(4, gp_face1);

intMultiplier = 1;

intVYMax = 6 * intMultiplier;
intVXMax = 2.4 * intMultiplier;
intJumpH = 8 * intMultiplier;
intGravityNorm = 0.25 * intMultiplier;
intGravitySlide = 0.2 * intMultiplier;

intGroundAcc = 0.5 * intMultiplier;
intGroundFric = 0.2 * intMultiplier;
intAirAcc = 0.6 * intMultiplier;
intAirFric = 0.1 * intMultiplier;

intEJumps = 1;
dashAble = 1;
bubbleJump = 0;

reading = 0;
ded = 0;

gamemode = 3;
viewactual = 0;
PlayerParallax = true;
/* Everything related to unlockable abilities:
gamemode 0: Walljump
gamemode 1: Double Jump 
gamemode 2: Walljump + Doublejump (Debug Mode only)
gamemode 3: None
gamemode 4: Kick + Walljump
*/
if(global.wallj)
{
    gamemode = 0;
}

//Transición de entrada y checkeo
instance_create(x,y,obj_NEWFade1);
if(global.checkpointID != -1 &amp;&amp; global.justDied)
{
    if(room != global.checkpointRoom)
    {
        room_goto(global.checkpointRoom);
    }
    else
    {
        x = global.checkpointX;
        y = global.checkpointY;
        global.justDied = false;
    }
}

//Checkear si se te acabaron las vidas
//Reiniciar todos los valores temporales
if (global.vidas &lt; 1)
{
room_goto(rm_Map1);
global.vidas = 15;
global.sfVidas = global.vidas;
global.checkpointRoom = rm_Map1;
global.checkpointID = -1;
//Lol, infinite 1ups
}

alarm0suma = 0;

//Color Party
if global.colorParty == 1
{
image_blend = make_colour_hsv(random(255), 240, 255);
}

//OP Character
if global.OPchar == 1
{
gamemode = 2;
}

//Run particles
countdown = 6;
ogCD = 6;
runSFX = 12;
ogRun = 12;

//Spriteset
PSidle = global.PSidle;;
PSwalk = global.PSwalk;
PSrun = global.PSrun;
PSjump = global.PSjump;
PSkick = global.PSkick;
PSslide = global.PSslide;
PSmap = global.PSmap;
PSmapIdle = global.PSmapIdle;
PSstageClear = global.PSstageClear;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>intVY = -intVYMax * 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///die
global.vidas--;
global.justDied = true;
global.sfVidas = global.vidas;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desplazamiento
/*
var keyLeft, keyRight, keyJump, keyJumpRelease, keyA;
keyLeft = -(keyboard_check(vk_left) || (gamepad_axis_value(4,gp_axislh) &lt; 0));
keyRight = keyboard_check(vk_right) || (gamepad_axis_value(4,gp_axislh) &gt; 0);

keyJump = keyboard_check(vk_up) || gamepad_button_check(4, gp_face1);
keyJumpRelease = keyboard_check_released(vk_up) || gamepad_button_check_released(4, gp_face1);
keyA = keyboard_check(ord("A")) || gamepad_button_check(4, gp_shoulderr);
keyZ = keyboard_check_pressed(ord("Z")) || gamepad_button_check_pressed(4, gp_face1);
keyDown = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(4, gp_shoulderrb);
*/
//Forzar movimiento
if (reading == 1)
{
    if (!(forceMove == 0)) intVX = scr_Approach(intVX, forceMove, intGroundAcc);
}
//Comprobacion de si esta ded
if (ded == 1)
{
intVY = 0
intVX = 0
reading = 1
}
//Comprobacion de colisiones
intColLeft = place_meeting(x-1, y, obj_block01);
intColRight = place_meeting(x+1, y, obj_block01);
bolGround = scr_Block();

if reading = 0//Fijarse si no estas leyendo
{
intMove = global.keyLeft + global.keyRight;
}
else if reading = 1
{
intMove = 0
}
//Aceleracion y friccion
if(!bolGround)
{
intTempAcc = intAirAcc;
intTempFric = intAirFric;
}
else
{
intTempAcc = intGroundAcc;
intTempFric = intGroundFric;
}
if reading = 0 //Fijarse si no estas leyendo
{
//Salto
if (global.keyJump &amp;&amp; bolGround)
{
intVY = -intVYMax;
audio_play_sound(snd_jump,0,0)//Sonido de saltar
}
else if(global.keyJump_pressed &amp;&amp; !bolGround &amp;&amp; !(intColLeft || intColRight) &amp;&amp; intEJumps &gt; 0)// Doble salto
{
    if (gamemode == 1 or gamemode == 2)
    {
    intVY = -intVYMax;
    intEJumps--;
    audio_play_sound(snd_jump,0,0)//Sonido de saltar
    }
}
if (gamemode == 0 or gamemode == 2)
{
if (global.keyJump_pressed &amp;&amp; !bolGround &amp;&amp; intColLeft)// Salto en la pared L
{
    intVY = -intVYMax;
    if(intMove == 0) image_xscale = 1; //Cambiar a R
    intVX = 2.4*1.5;
    audio_play_sound(snd_wallj,0,0)//Sonido de saltar
    scr_jumpParticles(2,0,x-10,y);
    scr_jumpParticles(1,2,x-10,y+4);
    scr_jumpParticles(1,-2,x-10,y-4);
}
if (global.keyJump_pressed &amp;&amp; !bolGround &amp;&amp; intColRight)// Salto en la pared R
{
    intVY = -intVYMax;
    if(intMove == 0) image_xscale = -1; //Cambiar a L
    intVX = -2.4*1.5;
    audio_play_sound(snd_wallj,0,0)//Sonido de saltar
    scr_jumpParticles(-2,0,x+10,y);
    scr_jumpParticles(-1,2,x+10,y+4);
    scr_jumpParticles(-1,-2,x+10,y-4);
}
}
//Cancelar Salto
if(global.keyJumpRelease &amp;&amp; !bolGround &amp;&amp; intVY &lt; -intVYMax/2 &amp;&amp; bubbleJump == 0)
{
    intVY = -intVYMax/2;
}
//Salto de burbuja
if(bubbleJump &gt; 0) //El salto de burbuja se activa al hacer explotar una burbuja
{                   //lo cual impide cancelar el salto por cierto tiempo
    bubbleJump--;
}
}
//Velocidad horizontal
if(intMove != 0) //Acelerar
{
    if((intVX * sign(intVX)) &lt; intVXMax + intTempAcc) //Acc normal
    {
        intVX = scr_Approach(intVX, intVXMax * intMove, intTempAcc);
    }
    else //Acc extendida más allá del límite por factores externos
    {
        if(sign(intVX) == sign(intMove) &amp;&amp; !bolGround) //Sigo tirando a la misma direccion
        {
            intVX = intVX;
        }
        else //Quiero frenar
        {
            intVX = scr_Approach(intVX, intVXMax * intMove, intTempAcc);
        }
    }
    
}
else if (bolGround or (!bolGround and intMove == 0)) //Frenar
{
    intVX = scr_Approach(intVX, intVXMax * intMove, intTempFric);
}
//Velocidad vertical
if(!bolGround)
{
if ((intColLeft || intColRight) &amp;&amp; intVY &gt;= 0) intVY = scr_Approach(intVY, intVYMax, intGravitySlide); //Deslizarse por la pared
else intVY = scr_Approach(intVY, intVYMax, intGravityNorm);//Caida libre
}
else
intEJumps = 1;
//Colision Horizontal
repeat(abs(intVX))
{
    //Slope arriba
    if (place_meeting(x + sign(intVX), y, obj_block01) &amp;&amp; place_meeting(x + sign(intVX), y - 1, obj_block01) &amp;&amp; !place_meeting(x + sign(intVX), y - 2, obj_block01))
    {
    y -= 2;
    }
    else if (place_meeting(x + sign(intVX), y, obj_block01) &amp;&amp; !place_meeting(x + sign(intVX), y - 1, obj_block01))
    {
    y--;
    }
    //Slope abajo
    if (!place_meeting(x + sign(intVX), y, obj_block01) &amp;&amp; !place_meeting(x + sign(intVX), y + 1, obj_block01) &amp;&amp; !place_meeting(x + sign(intVX), y + 2, obj_block01) &amp;&amp; place_meeting(x + sign(intVX), y + 3, obj_block01))
    {
    y += 2;
    }
    else if (!place_meeting(x + sign(intVX), y, obj_block01) &amp;&amp; !place_meeting(x + sign(intVX), y + 1, obj_block01) &amp;&amp; place_meeting(x + sign(intVX), y + 2, obj_block01))
    {
    y++;
    }
    //------
    if(!place_meeting(x + sign(intVX), y, obj_block01))
    {
    x += sign(intVX);
    }
    else
    {
    intVX = 0;
    break;
    }
}

//Colision Vertical
repeat(abs(intVY))
{
    if(place_meeting(x, y + sign(intVY), obj_block01))
    {
    intVY = 0;
    break;
    }
    else if (place_meeting(x, y + sign(intVY), obj_platform) &amp;&amp; !place_meeting(x, y, obj_platform) &amp;&amp; intVY &gt;= 0)
    {
    intVY = 0;
    break;
    }
    else
    {
    y += sign(intVY);
    }
}
//Correr
if (global.keyA)
{
intVXMax = 3.0
}
else
{
intVXMax = 2.4
}
//Debug--------------------------------------------------------
if(global.colorParty)
{
    if(keyboard_check_pressed(ord("R")) &amp;&amp; !ded)
    {
    global.Score -= puntaje;
    room_restart()
    }
    if (keyboard_check_pressed(ord("T")))
    {
        room_goto_next();
    }
    if (keyboard_check_pressed(ord("E")))
    {
        room_goto_previous();
    }
    if (keyboard_check_pressed(ord("P")))
    {
        sound_stop_all();
    }
    
    /*if (keyboard_check_pressed(ord("Q")))
    {
        scr_saveGame();
    }*/
    if (keyboard_check_pressed(ord("W")))
    {
        scr_loadGame();
    }
    if(keyboard_check(vk_space))
    {
        intVX += 1*image_xscale;
    }
}
//Control de los fondos
if(PlayerParallax)
{
    background_x[0] = view_xview[viewactual]/2
    background_x[1] = view_xview[viewactual]/4
}

//Control de la musica
if (global.vidas == 1 and ded == 1)
{
if (alarm0suma == 0)
{
alarm[0] = 240;
alarm0suma = 1;
}
audio_stop_sound(snd_music);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animaciones

keyA = keyboard_check(ord("A")) || gamepad_button_check(4, gp_shoulderr);
///Animaciones
image_speed = 0.2;
//Reflejo
//Normal
if(intMove != 0) image_xscale = intMove;
if(intColLeft &amp;&amp; !bolGround &amp;&amp; place_meeting(x-1, y-1, obj_block01))//Pared izquierda
{
image_xscale = -1;
}
if(intColRight &amp;&amp; !bolGround &amp;&amp; place_meeting(x+1, y-1, obj_block01))//Pared derecha
{
image_xscale = 1;
}
//Saltando
if(!bolGround)
{
if !(intColLeft || intColRight)
sprite_index = PSjump;
else
if (gamemode == 0 or gamemode == 2)
sprite_index = PSslide;
else
sprite_index = PSjump;
}
else
{
if(intVX = 0) 
sprite_index = PSidle;
else if(intVX &lt; -0.5 || intVX &gt; 0.5)
    {
    if(keyA and intVX &gt; 1 or keyA and intVX &lt; -1)
    sprite_index = PSrun;
    else
    sprite_index = PSwalk;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Extra Effects
//Run particles
var bolGround = scr_Block();
if(intMove != 0 &amp;&amp; (abs(intVX) &gt; 2.6 || abs(intVX) &lt; -2.6) &amp;&amp; bolGround)
{
    //Particles
    if(countdown &gt; 0)
    {
        countdown--;
    }
    if(countdown &lt;= 0)
    {
        scr_runParticles(2);
        countdown = ogCD;
    }
    //SFX
    if(runSFX &gt; 0)
    {
        runSFX--;
    }
    if(runSFX &lt;= 0)
    {
        audio_play_sound(snd_walkSound, 0, 0);
        runSFX = ogRun;
    }
    
}
else
{
    runSFX = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_laserX">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.state == 1
{
if (ded == 0)
{
ded = 1
reading = 1
instance_create(x,y,obj_smoke)
alarm[0] = 60
image_alpha = 0
audio_play_sound(snd_ded,0,0)//Sonido de morir
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enem2X">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.exploded == 1
{
if (ded == 0)
{
ded = 1
reading = 1
instance_create(x,y,obj_smoke)
alarm[0] = 60
image_alpha = 0
audio_play_sound(snd_ded,0,0)//Sonido de morir
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hurt">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ded == 0)
{
ded = 1
reading = 1
instance_create(x,y,obj_smoke)
alarm[0] = 60
image_alpha = 0
audio_play_sound(snd_ded,0,0)//Sonido de morir
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>intVY = 0
intVX = 0
if other.active = 1
{
other.active = 0
instance_create(view_xview[view_current], view_yview[view_current], fade2_gen)
reading = 1
audio_play_sound(snd_door,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_roomchange">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.active = 1 &amp;&amp; (global.keyDown) &amp;&amp; reading = 0
{
other.active = 0
instance_create(view_xview[view_current], view_yview[view_current], fade2_gen)
reading = 1
audio_play_sound(snd_door,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.active = 1 &amp;&amp; (global.keyDown) &amp;&amp; reading = 0
{
other.active = 0
instance_create(x,y,obj_NEWFade0);
reading = 1
audio_play_sound(snd_door,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_textbox02">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.text_active = 0
{
with(other)
{
text_active = 1
message_length = string_length(message[message_current]);  //get the new character length for message
characters = 0; //set the characters back to 0
message_draw = ""; //clear the drawn text
}
reading = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_textbox01">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(other.instant)
{
    case false: //Not instant, down has to be pressed
    if other.text_active = 0 &amp;&amp; (global.keyDown)
    {
        with(other)
        {
            text_active = 1
            message_length = string_length(message[message_current]);  //get the new character length for message
            characters = 0; //set the characters back to 0
            message_draw = ""; //clear the drawn text
        }
        reading = 1
    }
    break;
    
    case true: //Instant, contact activates dialogue
    if other.text_active = 0
    {
        with(other)
        {
            text_active = 1
            message_length = string_length(message[message_current]);  //get the new character length for message
            characters = 0; //set the characters back to 0
            message_draw = ""; //clear the drawn text
        }
        reading = 1
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
